for (i in 1:4){#
	print(i)#
}
print(m3)
m = matrix(1:10,nrow=2)#
print(m)#
for (i in 1:5){#
	m3[i,] = m[,i]#
}#
print(m3)
m3 = m+4
m = matrix(1:10,nrow=2)#
m3 = m+4#
print(m)#
for (i in 1:5){#
	m3[i,] = m[,i]#
}#
print(m3)
m = matrix(1:10,nrow=2)#
m3 = m+4#
print(m)#
for (i in 1:5){#
	m3[,i] = m[,i]#
}#
print(m3)
while(sum(m) > 5){#
	print(m)#
}
x11()
v1 =1:3
v2=3:5
plot(v1,v2)
help(par)
lines(v1,v2)
aline(v1,v2)
abline(v1,v2)
q()
？？arma
??arma
??parcorr
parcorr(array(1:10))
VarCor(array(1:10))
VarCorr(array(1:10))
VarCorr()
a = array(1:20)
a
ARIMA(2,0,2)
Arima
??Arima
arima(2,0,2)
data = array([1.1 0.2 1.2 -0.3 3.1 0.9 3.8 1.6 4.4 1.3 5.9 2.3])
data = array(1.1 0.2 1.2 -0.3 3.1 0.9 3.8 1.6 4.4 1.3 5.9 2.3)
data = matrix([1.1 0.2 1.2 -0.3 3.1 0.9 3.8 1.6 4.4 1.3 5.9 2.3])
sample_data = c(1.1, 0.2, 1.2, -0.3, 3.1, 0.9, 3.8, 1.6, 4.4, 1.3, 5.9, 2.3)
sample_data
time = seq(0, 2, length = 12)#
time
auto.arima
? auto.arima
?? auto.arima
?? auto
?? ariam
?? arima
arima(sample_data)
predict = arima
predict = arima(sample_data)
plot(predict)
predict
predict(13)
?? AR
install.packages('forecast',dependecies = TRUE)
#install.packages("devtools")
install.packages("devtools")
devtools::install_github("robjhyndman/forecast")
auto.arima
auto.arima(sample_Data)
auto.arima(sample_data)
install.packages('forecast', dependencies = TRUE)
auto.arima(sample_data)
install.packages('forecast', dependencies = TRUE)
auto.arima
source("/Users/Chandrin/Downloads/forecast/R/forecast")
library(forecast)
auto.arima(sample_data)
plot(forecast(fit, h = 20))
fit <- auto.arima(Data)
fit <- auto.arima(sample_data)
plot(forecast(fit, h = 20))
library(forecast)#
library(MASS)#
#
#LOAD DATA#
data <- read.table("fanucCurr_output.txt")#
time.year <- data[,1]#
time.month <- data[,2]#
time.day <- data[,3]#
time.hour <- data[,4]#
time.minutes <- data[,5]#
time.sec <- data[,6]#
curr <- data[,7]*0.01#
rm(data);#
data <- read.table("fanucVol_output.txt")#
vol <- data[,7]*0.1#
rm(data);#
data <- read.table("fanucFreq_output.txt")#
freq <-data[,7]/10#
rm(data);#
data.freq = freq#
data.vol = vol#
data.curr = curr#
rm(freq);#
rm(curr);#
rm(vol);#
#
# ASSIGN DATA ATTRIBUTES#
data.freq.mean = mean(data.freq)#
data.freq.min = min(data.freq)#
data.freq.max = max(data.freq)#
data.freq.std = sd(data.freq)#
data.freq.max_idx = which(data.freq %in% data.freq.max)#
data.vol.mean = mean(data.vol)#
data.vol.min = min(data.vol)#
data.vol.max = max(data.vol)#
data.vol.std = sd(data.vol)#
data.vol.max_idx = which(data.vol %in% data.vol.max)#
data.vol.idx = which(data.vol > data.vol.min)#
data.curr.mean = mean(data.curr)#
data.curr.min = min(data.curr)#
data.curr.max = max(data.curr)#
data.curr.std = sd(data.curr)#
data.curr.max_idx = which(data.curr %in% data.curr.max)#
data.curr.idx = which(data.curr > data.curr.min)#
#
#PRINT STATS#
print(c("mean volatge is:",data.vol.mean))#
print(c("max voltage is:",data.vol.max))#
print(c("voltage std is:",data.vol.std))#
print(c("mean current is:",data.curr.mean))#
print(c("max current is:",data.curr.max))#
print(c("current std is:",data.curr.std))
dec.cur = data.curr[which(data.curr[dec] > 0)]#
dec.vol = data.vol[which(data.vol[dec] > 0)]
setwd("/Users/Chandrin/Google Drive/2017WN/MDP/data processing/")
library(forecast)#
library(MASS)#
#
#LOAD DATA#
data <- read.table("fanucCurr_output.txt")#
time.year <- data[,1]#
time.month <- data[,2]#
time.day <- data[,3]#
time.hour <- data[,4]#
time.minutes <- data[,5]#
time.sec <- data[,6]#
curr <- data[,7]*0.01#
rm(data);#
data <- read.table("fanucVol_output.txt")#
vol <- data[,7]*0.1#
rm(data);#
data <- read.table("fanucFreq_output.txt")#
freq <-data[,7]/10#
rm(data);#
data.freq = freq#
data.vol = vol#
data.curr = curr#
rm(freq);#
rm(curr);#
rm(vol);#
#
# ASSIGN DATA ATTRIBUTES#
data.freq.mean = mean(data.freq)#
data.freq.min = min(data.freq)#
data.freq.max = max(data.freq)#
data.freq.std = sd(data.freq)#
data.freq.max_idx = which(data.freq %in% data.freq.max)#
data.vol.mean = mean(data.vol)#
data.vol.min = min(data.vol)#
data.vol.max = max(data.vol)#
data.vol.std = sd(data.vol)#
data.vol.max_idx = which(data.vol %in% data.vol.max)#
data.vol.idx = which(data.vol > data.vol.min)#
data.curr.mean = mean(data.curr)#
data.curr.min = min(data.curr)#
data.curr.max = max(data.curr)#
data.curr.std = sd(data.curr)#
data.curr.max_idx = which(data.curr %in% data.curr.max)#
data.curr.idx = which(data.curr > data.curr.min)#
#
#PRINT STATS#
print(c("mean volatge is:",data.vol.mean))#
print(c("max voltage is:",data.vol.max))#
print(c("voltage std is:",data.vol.std))#
print(c("mean current is:",data.curr.mean))#
print(c("max current is:",data.curr.max))#
print(c("current std is:",data.curr.std))
dec.cur = data.curr[which(data.curr[dec] > 0)]#
dec.vol = data.vol[which(data.vol[dec] > 0)]
dec = which(time.month == 12)#
dec.cur = data.curr[which(data.curr[dec] > 0)]#
dec.vol = data.vol[which(data.vol[dec] > 0)]
par(mfrow = c(2,1))
plot(dec.cur)
plot(dec.vol)
# Deal with data#
dec = which(time.month == 12)#
decidx = which(data.freq[dec] < data.freq.max)#
dec.cur = data.curr[which(data.curr[decidx] > 0)]#
dec.vol = data.vol[which(data.vol[decidx] > 0)]
par(mfrow = c(2,1))
plot(dec.vol,type = "l")
plot(dec.cur,type = "l")
dec = which(time.month == 12)#
decidx = which(data.freq[dec] < 200)#
dec.cur = data.curr[which(data.curr[decidx] > 0)]#
dec.vol = data.vol[which(data.vol[decidx] > 0)]
par(mfrow = c(2,1))
plot(dec.vol,type = "l")
plot(dec.cur,type = "l")
plot(data.freq)
plot(data.freq[decidx])
./pwd
pwd
library(marima)#
library(forecast)#
fanuc#
fanuc.cur <- read.table("curr_output.txt")#
fanuc.vol <- read.table("vol_output.txt")#
fanuc.frq <- read.table("freq_output.txt")#
cur = t(fanuc.cur[,7]*0.01)#
cur = cur[which(fanuc.cur[,7] > 0)];#
vol = t(fanuc.vol[,7]*0.1)#
vol = vol[which(fanuc.vol[,7] > 0)];#
frq = t(fanuc.frq[,7]/60)#
frq = frq[which(fanuc.frq[,7] > 0)];#
fanuc = data.frame(cur,vol,frq)
fanuc.dif = define.dif(fanuc,difference = c(1,1 ,2,100 ,3,1))
fanuc.dif.analysis = fanuc.dif$y.dif
plot(frq)
cur_20 = cur[which(frq[,7] = 20)];
cur_20 = cur[which(frq[,7] == 20)];
cur_20 = cur[which(frq== 20)];
plot(cur_20)
cur_20 = cur[which(frq== 20)];#
cur_30 = cur[which(frq== 30)];#
cur_45 = cur[which(frq== 45)];#
cur_60 = cur[which(frq== 60)];#
#
vol_20 = vol[which(frq== 20)];#
vol_30 = vol[which(frq== 30)];#
vol_45 = vol[which(frq== 45)];#
vol_60 = vol[which(frq== 60)];
?arma.forecast
?define.model
library(marima)#
library(forecast)#
fanuc.cur <- read.table("curr_output.txt")#
fanuc.vol <- read.table("vol_output.txt")#
fanuc.frq <- read.table("freq_output.txt")#
cur = t(fanuc.cur[,7]*0.01)#
cur = cur[which(fanuc.cur[,7] > 0)];#
vol = t(fanuc.vol[,7]*0.1)#
vol = vol[which(fanuc.vol[,7] > 0)];#
frq = t(fanuc.frq[,7]/60)#
frq = frq[which(fanuc.frq[,7] > 0)];#
fanuc = data.frame(cur,vol,frq)#
#
cur_20 = cur[which(frq== 20)];#
cur_30 = cur[which(frq== 30)];#
cur_45 = cur[which(frq== 45)];#
cur_60 = cur[which(frq== 60)];#
#
vol_20 = vol[which(frq== 20)];#
vol_30 = vol[which(frq== 30)];#
vol_45 = vol[which(frq== 45)];#
vol_60 = vol[which(frq== 60)];#
#
data_20 = data.frame(cur_20,vol_20)#
data_30 = data.frame(cur_30,vol_30)#
data_45 = data.frame(cur_45,vol_45)#
data_60 = data.frame(cur_60,vol_60)#
model = define.model(kvar=2, ar=c(1,2), ma=c(1,2))#
marima1 = marima(ts(data_20[1:100, ]),model$ar.pattern, model$ma.pattern, penalty=1)#
nstart = 100#
nstep = 10#
Forecasts = arma.forecast(series=ts(data_20), marima=model, nstart=nstart, nstep=nstep, dif.poly = dif.poly, check=FALSE)#
Predict = Forecasts$forecasts[,(nstart+1):(nstart+nstep)]#
plot((nstart+1):(nstart+nstep),Predict[2,], xlim = c(0,10000),ylim = c(30,130), type='l',col = "blue",xlab= "index",ylab = "data")#
par(new = TRUE)#
plot(vol[1:10000],type = 'l',col = "red",xlim = c(0,10000), ylim = c(30,130),xlab= "index",ylab = "data")
Forecasts = arma.forecast(series=ts(data_20), marima=model, nstart=nstart, nstep=nstep, check=FALSE)#
Predict = Forecasts$forecasts[,(nstart+1):(nstart+nstep)]#
plot((nstart+1):(nstart+nstep),Predict[2,], xlim = c(0,10000),ylim = c(30,130), type='l',col = "blue",xlab= "index",ylab = "data")#
par(new = TRUE)#
plot(vol[1:10000],type = 'l',col = "red",xlim = c(0,10000), ylim = c(30,130),xlab= "index",ylab = "data")
length(data_20)
data_20
marima1 = marima(ts(data_20[1:200, ]),model$ar.pattern, model$ma.pattern, penalty=1)#
nstart = 200#
nstep = 24#
Forecasts = arma.forecast(series=ts(data_20), marima=model, nstart=nstart, nstep=nstep, check=FALSE)#
Predict = Forecasts$forecasts[,(nstart+1):(nstart+nstep)]#
plot((nstart+1):(nstart+nstep),Predict[2,], xlim = c(0,10000),ylim = c(30,130), type='l',col = "blue",xlab= "index",ylab = "data")#
par(new = TRUE)#
plot(vol[1:10000],type = 'l',col = "red",xlim = c(0,10000), ylim = c(30,130),xlab= "index",ylab = "data")
data_20[1:nstart,]
nstart = 200#
nstep = 24#
series = data_20[1:nstart,]#
series[nstart+1:nstart+nstep,] = NA#
model = define.model(kvar=2, ar=c(1,2), ma=c(1,2))#
marima1 = marima(ts(series),model$ar.pattern, model$ma.pattern, penalty=1)#
#
Forecasts = arma.forecast(series=ts(series), marima=model, nstart=nstart, nstep=nstep, check=FALSE)#
Predict = Forecasts$forecasts[,(nstart+1):(nstart+nstep)]#
plot((nstart+1):(nstart+nstep),Predict[2,], xlim = c(0,10000),ylim = c(30,130), type='l',col = "blue",xlab= "index",ylab = "data")#
par(new = TRUE)#
plot(vol[1:10000],type = 'l',col = "red",xlim = c(0,10000), ylim = c(30,130),xlab= "index",ylab = "data")
model = define.model(kvar=2, ar=c(1,2), ma=c(1,2))
marima1 = marima(ts(series),model$ar.pattern, model$ma.pattern, penalty=1)
Forecasts = arma.forecast(series=ts(series), marima=model, nstart=nstart, nstep=nstep, check=FALSE)
Forecasts = arma.forecast(series=ts(t(series)), marima=model, nstart=nstart, nstep=nstep, check=FALSE)
Forecasts = arma.forecast(series=ts(series[,1]), marima=model, nstart=nstart, nstep=nstep, check=FALSE)
series[,1]
data_20
series[(nstart+1):(nstart+nstep),] = NA
series
nstart = 200#
nstep = 24#
rm(series)#
series = data_20[1:nstart,]#
series[(nstart+1):(nstart+nstep),] = NA
series
model = define.model(kvar=2, ar=c(1,2), ma=c(1,2))
marima1 = marima(ts(series),model$ar.pattern, model$ma.pattern, penalty=1)
Forecasts = arma.forecast(series=ts(series[,1]), marima=model, nstart=nstart, nstep=nstep, check=FALSE)
series[,1]
Forecasts = arma.forecast(series=ts(series), marima=model, nstart=nstart, nstep=nstep, check=FALSE)
Forecasts = arma.forecast(series=ts(series), marima=model, nstart=nstart, nstep=nstep)
Forecasts = arma.forecast(series=ts(series), marima=marima1, nstart=nstart, nstep=nstep)
Forecasts = arma.forecast(series=ts(series), marima=marima1, nstart=nstart, nstep=nstep, check=F)
Predict = Forecasts$forecasts[,(nstart+1):(nstart+nstep)]
series[1,].min
min(series[1,])
Predict = Forecasts$forecasts[,(nstart+1):(nstart+nstep)]#
plot((nstart+1):(nstart+nstep),Predict[1,], xlim = c(0,(nstart+nstep)),ylim = c(min(series[1,]),max(series[1,])), type='l',col = "blue",xlab= "index",ylab = "data")#
par(new = TRUE)#
plot(vol[1:(nstart+nstep)],type = 'l',col = "red",xlim = c(0,(nstart+nstep)), ylim = c(min(series[1,]),max(series[1,])),xlab= "index",ylab = "data")
Forecasts = arma.forecast(series=ts(series[,1]), marima=marima1, nstart=nstart, nstep=nstep, check=F)
marima1 = marima(ts(series[,1]),model$ar.pattern, model$ma.pattern, penalty=1)
series[,1]
marima1 = marima(ts(series),model$ar.pattern, model$ma.pattern, penalty=1)
Forecasts = arma.forecast(series=ts(series), marima=marima1, nstart=nstart, nstep=nstep, check=F)
Predict = Forecasts$forecasts[,(nstart+1):(nstart+nstep)]
plot((nstart+1):(nstart+nstep),Predict[1,], xlim = c(0,(nstart+nstep)),ylim = c(min(series[1,]),max(series[1,])), type='l',col = "blue",xlab= "index",ylab = "data")
par(new = TRUE)
plot(cur_20[1:(nstart+nstep)],type = 'l',col = "red",xlim = c(0,(nstart+nstep)), ylim = c(min(series[1,]),max(series[1,])),xlab= "index",ylab = "data")
max(series[1,])
series[1,]
nstart = 200#
nstep = 24#
rm(series)#
series = data_20[1:nstart,]#
series[(nstart+1):(nstart+nstep),] = NA#
model = define.model(kvar=2, ar=c(1,2), ma=c(1,2))#
marima1 = marima(ts(series),model$ar.pattern, model$ma.pattern, penalty=1)#
Forecasts = arma.forecast(series=ts(series), marima=marima1, nstart=nstart, nstep=nstep, check=F)#
Predict = Forecasts$forecasts[,(nstart+1):(nstart+nstep)]#
plot((nstart+1):(nstart+nstep),Predict[1,], xlim = c(0,(nstart+nstep)),ylim = c(min(series[,1]),max(series[,1])), type='l',col = "blue",xlab= "index",ylab = "data")#
par(new = TRUE)#
plot(cur_20[1:(nstart+nstep)],type = 'l',col = "red",xlim = c(0,(nstart+nstep)), ylim = c(min(series[,1]),max(series[,1])),xlab= "index",ylab = "data")
min(series[,1])
plot((nstart+1):(nstart+nstep),Predict[1,], xlim = c(0,(nstart+nstep)),ylim = c(min(series[,1:nstart]),max(series[,1:nstart])), type='l',col = "blue",xlab= "index",ylab = "data")
min(series[,1:nstart])
plot((nstart+1):(nstart+nstep),Predict[1,], xlim = c(0,(nstart+nstep)),ylim = c(min(cur_20),max(cur_20), type='l',col = "blue",xlab= "index",ylab = "data")
par(new = TRUE)
plot((nstart+1):(nstart+nstep),Predict[1,], xlim = c(0,(nstart+nstep)),ylim = c(min(cur_20),max(cur_20)), type='l',col = "blue",xlab= "index",ylab = "data")
par(new = TRUE)
plot(cur_20[1:(nstart+nstep)],type = 'l',col = "red",xlim = c(0,(nstart+nstep)), c(min(cur_20),max(cur_20),xlab= "index",ylab = "data")
plot(cur_20[1:(nstart+nstep)],type = 'l',col = "red",xlim = c(0,(nstart+nstep)), c(min(cur_20),max(cur_20)),xlab= "index",ylab = "data")
plot(cur_20[1:(nstart+nstep)],type = 'l',col = "red",xlim = c(0,(nstart+nstep)), c(min(cur_20),max(cur_20)),xlab= "index",ylab = "data")
plot(cur_20[1:(nstart+nstep)],type = 'l',col = "red",xlim = c(0,(nstart+nstep)), c(min(cur_20),max(cur_20)),xlab= "index",ylab = "data")
cur_20[1:(nstart+nstep)]
min(cur_20),max(cur_20)
min(cur_20) max(cur_20)
min(cur_20)
max(cur_20)
plot((nstart+1):(nstart+nstep),Predict[1,], xlim = c(0,(nstart+nstep)),ylim = c(min(cur_20),max(cur_20)), type='l',col = "blue",xlab= "index",ylab = "data")
par(new = TRUE)
plot(cur_20[1:(nstart+nstep)],type = 'l',col = "red",xlim = c(0,(nstart+nstep)), ylim=c(min(cur_20),max(cur_20)),xlab= "index",ylab = "data")
nstart = 200#
nstep = 20#
rm(series)#
series = data_20[1:nstart,]#
series[(nstart+1):(nstart+nstep),] = NA#
model = define.model(kvar=2, ar=c(1,2), ma=c(1,2))#
marima1 = marima(ts(series),model$ar.pattern, model$ma.pattern, penalty=1)#
Forecasts = arma.forecast(series=ts(series), marima=marima1, nstart=nstart, nstep=nstep, check=F)#
Predict = Forecasts$forecasts[,(nstart+1):(nstart+nstep)]#
plot((nstart+1):(nstart+nstep),Predict[1,], xlim = c(0,(nstart+nstep)),ylim = c(min(cur_20),max(cur_20)), type='l',col = "blue",xlab= "index",ylab = "data")#
par(new = TRUE)#
plot(cur_20[1:(nstart+nstep)],type = 'l',col = "red",xlim = c(0,(nstart+nstep)), ylim=c(min(cur_20),max(cur_20)),xlab= "index",ylab = "data")
nstart = 100
nstep = 100
rm(series)#
series = data_20[1:nstart,]#
series[(nstart+1):(nstart+nstep),] = NA#
model = define.model(kvar=2, ar=c(1,2), ma=c(1,2))#
marima1 = marima(ts(series),model$ar.pattern, model$ma.pattern, penalty=1)#
Forecasts = arma.forecast(series=ts(series), marima=marima1, nstart=nstart, nstep=nstep, check=F)#
Predict = Forecasts$forecasts[,(nstart+1):(nstart+nstep)]#
plot((nstart+1):(nstart+nstep),Predict[1,], xlim = c(0,(nstart+nstep)),ylim = c(min(cur_20),max(cur_20)), type='l',col = "blue",xlab= "index",ylab = "data")#
par(new = TRUE)#
plot(cur_20[1:(nstart+nstep)],type = 'l',col = "red",xlim = c(0,(nstart+nstep)), ylim=c(min(cur_20),max(cur_20)),xlab= "index",ylab = "data")
plot((nstart+1):(nstart+nstep),Predict[1,], xlim = c(0,(nstart+nstep)),ylim = c(min(cur_20),max(cur_20)), type='l',col = "blue",xlab= "index",ylab = "data")
plot(Predict)
plot(Predict[1,])
plot((nstart+1):(nstart+nstep),Predict[1,], xlim = c(0,(nstart+nstep)),ylim = c(min(cur_20),max(cur_20)), type='l',col = "blue",xlab= "index",ylab = "data")
nstart = 200
nstep = 10
rm(series)
series = data_20[1:nstart,]
series[(nstart+1):(nstart+nstep),] = NA
model = define.model(kvar=2, ar=c(1,2), ma=c(1,2))#
marima1 = marima(ts(series),model$ar.pattern, model$ma.pattern, penalty=1)#
Forecasts = arma.forecast(series=ts(series), marima=marima1, nstart=nstart, nstep=nstep, check=F)#
Predict = Forecasts$forecasts[,(nstart+1):(nstart+nstep)]#
plot((nstart+1):(nstart+nstep),Predict[1,], xlim = c(0,(nstart+nstep)),ylim = c(min(cur_20),max(cur_20)), type='l',col = "blue",xlab= "index",ylab = "data")#
par(new = TRUE)#
plot(cur_20[1:(nstart+nstep)],type = 'l',col = "red",xlim = c(0,(nstart+nstep)), ylim=c(min(cur_20),max(cur_20)),xlab= "index",ylab = "data")
nstart = 150#
nstep = 50#
rm(series)#
series = data_20[1:nstart,]#
series[(nstart+1):(nstart+nstep),] = NA#
model = define.model(kvar=2, ar=c(1,2), ma=c(1,2))#
marima1 = marima(ts(series),model$ar.pattern, model$ma.pattern, penalty=1)#
Forecasts = arma.forecast(series=ts(series), marima=marima1, nstart=nstart, nstep=nstep, check=F)#
Predict = Forecasts$forecasts[,(nstart+1):(nstart+nstep)]#
plot((nstart+1):(nstart+nstep),Predict[1,], xlim = c(0,(nstart+nstep)),ylim = c(min(cur_20),max(cur_20)), type='l',col = "blue",xlab= "index",ylab = "data")#
par(new = TRUE)#
plot(cur_20[1:(nstart+nstep)],type = 'l',col = "red",xlim = c(0,(nstart+nstep)), ylim=c(min(cur_20),max(cur_20)),xlab= "index",ylab = "data")
nstart = 150#
nstep = 50#
rm(series)#
series = data_20[1:nstart,]#
series[(nstart+1):(nstart+nstep),] = NA#
model = define.model(kvar=2, ar=c(1), ma=c(1,2))#
marima1 = marima(ts(series),model$ar.pattern, model$ma.pattern, penalty=1)#
Forecasts = arma.forecast(series=ts(series), marima=marima1, nstart=nstart, nstep=nstep, check=F)#
Predict = Forecasts$forecasts[,(nstart+1):(nstart+nstep)]#
plot((nstart+1):(nstart+nstep),Predict[1,], xlim = c(0,(nstart+nstep)),ylim = c(min(cur_20),max(cur_20)), type='l',col = "blue",xlab= "index",ylab = "data")#
par(new = TRUE)#
plot(cur_20[1:(nstart+nstep)],type = 'l',col = "red",xlim = c(0,(nstart+nstep)), ylim=c(min(cur_20),max(cur_20)),xlab= "index",ylab = "data")
nstart = 150#
nstep = 50#
rm(series)#
series = data_20[1:nstart,]#
series[(nstart+1):(nstart+nstep),] = NA#
model = define.model(kvar=2, ar=c(1,2,3), ma=c(1,2))#
marima1 = marima(ts(series),model$ar.pattern, model$ma.pattern, penalty=1)#
Forecasts = arma.forecast(series=ts(series), marima=marima1, nstart=nstart, nstep=nstep, check=F)#
Predict = Forecasts$forecasts[,(nstart+1):(nstart+nstep)]#
plot((nstart+1):(nstart+nstep),Predict[1,], xlim = c(0,(nstart+nstep)),ylim = c(min(cur_20),max(cur_20)), type='l',col = "blue",xlab= "index",ylab = "data")#
par(new = TRUE)#
plot(cur_20[1:(nstart+nstep)],type = 'l',col = "red",xlim = c(0,(nstart+nstep)), ylim=c(min(cur_20),max(cur_20)),xlab= "index",ylab = "data")
model = define.model(kvar=2, ar=c(1,2), ma=c(1))
marima1 = marima(ts(series),model$ar.pattern, model$ma.pattern, penalty=1)#
Forecasts = arma.forecast(series=ts(series), marima=marima1, nstart=nstart, nstep=nstep, check=F)#
Predict = Forecasts$forecasts[,(nstart+1):(nstart+nstep)]#
plot((nstart+1):(nstart+nstep),Predict[1,], xlim = c(0,(nstart+nstep)),ylim = c(min(cur_20),max(cur_20)), type='l',col = "blue",xlab= "index",ylab = "data")#
par(new = TRUE)#
plot(cur_20[1:(nstart+nstep)],type = 'l',col = "red",xlim = c(0,(nstart+nstep)), ylim=c(min(cur_20),max(cur_20)),xlab= "index",ylab = "data")
nstart = 500
nstart = 500#
nstep = 50#
rm(series)#
series = data_30[1:nstart,]#
series[(nstart+1):(nstart+nstep),] = NA#
model = define.model(kvar=2, ar=c(1,2), ma=c(1))#
marima1 = marima(ts(series),model$ar.pattern, model$ma.pattern, penalty=1)#
Forecasts = arma.forecast(series=ts(series), marima=marima1, nstart=nstart, nstep=nstep, check=F)#
Predict = Forecasts$forecasts[,(nstart+1):(nstart+nstep)]#
plot((nstart+1):(nstart+nstep),Predict[1,], xlim = c(0,(nstart+nstep)),ylim = c(min(cur_30),max(cur_30)), type='l',col = "blue",xlab= "index",ylab = "data")#
par(new = TRUE)#
plot(cur_30[1:(nstart+nstep)],type = 'l',col = "red",xlim = c(0,(nstart+nstep)), ylim=c(min(cur_30),max(cur_30)),xlab= "index",ylab = "data")
model = define.model(kvar=2, ar=c(1,2), ma=c(1,2))
marima1 = marima(ts(series),model$ar.pattern, model$ma.pattern, penalty=1)#
Forecasts = arma.forecast(series=ts(series), marima=marima1, nstart=nstart, nstep=nstep, check=F)#
Predict = Forecasts$forecasts[,(nstart+1):(nstart+nstep)]#
plot((nstart+1):(nstart+nstep),Predict[1,], xlim = c(0,(nstart+nstep)),ylim = c(min(cur_30),max(cur_30)), type='l',col = "blue",xlab= "index",ylab = "data")#
par(new = TRUE)#
plot(cur_30[1:(nstart+nstep)],type = 'l',col = "red",xlim = c(0,(nstart+nstep)), ylim=c(min(cur_30),max(cur_30)),xlab= "index",ylab = "data")
nstart = 500#
nstep = 200#
rm(series)#
series = data_30[1:nstart,]#
series[(nstart+1):(nstart+nstep),] = NA#
model = define.model(kvar=2, ar=c(1,2), ma=c(1,2))#
marima1 = marima(ts(series),model$ar.pattern, model$ma.pattern, penalty=1)#
Forecasts = arma.forecast(series=ts(series), marima=marima1, nstart=nstart, nstep=nstep, check=F)#
Predict = Forecasts$forecasts[,(nstart+1):(nstart+nstep)]#
plot((nstart+1):(nstart+nstep),Predict[1,], xlim = c(0,(nstart+nstep)),ylim = c(min(cur_30),max(cur_30)), type='l',col = "blue",xlab= "index",ylab = "data")#
par(new = TRUE)#
plot(cur_30[1:(nstart+nstep)],type = 'l',col = "red",xlim = c(0,(nstart+nstep)), ylim=c(min(cur_30),max(cur_30)),xlab= "index",ylab = "data")
nstart = 500#
nstep = 300#
rm(series)#
series = data_30[1:nstart,]#
series[(nstart+1):(nstart+nstep),] = NA#
model = define.model(kvar=2, ar=c(1,2), ma=c(1,2))#
marima1 = marima(ts(series),model$ar.pattern, model$ma.pattern, penalty=1)#
Forecasts = arma.forecast(series=ts(series), marima=marima1, nstart=nstart, nstep=nstep, check=F)#
Predict = Forecasts$forecasts[,(nstart+1):(nstart+nstep)]#
plot((nstart+1):(nstart+nstep),Predict[1,], xlim = c(0,(nstart+nstep)),ylim = c(min(cur_30),max(cur_30)), type='l',col = "blue",xlab= "index",ylab = "data")#
par(new = TRUE)#
plot(cur_30[1:(nstart+nstep)],type = 'l',col = "red",xlim = c(0,(nstart+nstep)), ylim=c(min(cur_30),max(cur_30)),xlab= "index",ylab = "data")
model = define.model(kvar=2, ar=c(1,2), ma=c(1))
marima1 = marima(ts(series),model$ar.pattern, model$ma.pattern, penalty=1)#
Forecasts = arma.forecast(series=ts(series), marima=marima1, nstart=nstart, nstep=nstep, check=F)#
Predict = Forecasts$forecasts[,(nstart+1):(nstart+nstep)]#
plot((nstart+1):(nstart+nstep),Predict[1,], xlim = c(0,(nstart+nstep)),ylim = c(min(cur_30),max(cur_30)), type='l',col = "blue",xlab= "index",ylab = "data")#
par(new = TRUE)#
plot(cur_30[1:(nstart+nstep)],type = 'l',col = "red",xlim = c(0,(nstart+nstep)), ylim=c(min(cur_30),max(cur_30)),xlab= "index",ylab = "data")
model = define.model(kvar=2, ar=c(1,2), ma=c(1,2))
marima1 = marima(ts(series),model$ar.pattern, model$ma.pattern, penalty=1)#
Forecasts = arma.forecast(series=ts(series), marima=marima1, nstart=nstart, nstep=nstep, check=F)#
Predict = Forecasts$forecasts[,(nstart+1):(nstart+nstep)]#
plot((nstart+1):(nstart+nstep),Predict[1,], xlim = c(0,(nstart+nstep)),ylim = c(min(cur_30),max(cur_30)), type='l',col = "blue",xlab= "index",ylab = "data")#
par(new = TRUE)#
plot(cur_30[1:(nstart+nstep)],type = 'l',col = "red",xlim = c(0,(nstart+nstep)), ylim=c(min(cur_30),max(cur_30)),xlab= "index",ylab = "data")
nstart = 500#
nstep = 300#
rm(series)#
series = data_30[1:nstart,]#
series[(nstart+1):(nstart+nstep),] = NA#
model = define.model(kvar=2, ar=c(1,2), ma=c(1,2))#
marima1 = marima(ts(series),model$ar.pattern, model$ma.pattern, penalty=1)#
Forecasts = arma.forecast(series=ts(series), marima=marima1, nstart=nstart, nstep=nstep, check=F)#
Predict = Forecasts$forecasts[,(nstart+1):(nstart+nstep)]#
plot((nstart+1):(nstart+nstep),Predict[1,], xlim = c(0,(nstart+nstep)),ylim = c(min(cur_30),max(cur_30)), type='l',col = "blue",xlab= "index",ylab = "current data [Amps]")#
par(new = TRUE)#
plot(cur_30[1:(nstart+nstep)],type = 'l',col = "red",xlim = c(0,(nstart+nstep)), ylim=c(min(cur_30),max(cur_30)),xlab= "index",ylab = "current data [Amps]")
legend(c('actual data','prediction'))
legend('topright', legend = c('actual data','prediction'))
legend('topright', col = c('blue','red'),legend = c('actual data','prediction'))
legend('topright',legend = c('actual data','prediction'),lty = c(1,1),col=c("blue","red"))
plot((nstart+1):(nstart+nstep),Predict[1,], xlim = c(0,(nstart+nstep)),ylim = c(min(cur_30),max(cur_30)), type='l',col = "blue",xlab= "index",ylab = "current data [Amps]")#
par(new = TRUE)#
plot(cur_30[1:(nstart+nstep)],type = 'l',col = "red",xlim = c(0,(nstart+nstep)), ylim=c(min(cur_30),max(cur_30)),xlab= "index",ylab = "current data [Amps]")#
legend('topright',legend = c('actual data','prediction'),lty = c(1,1),col=c("blue","red"))
plot((nstart+1):(nstart+nstep),Predict[1,], xlim = c(0,(nstart+nstep)),ylim = c(min(cur_30),max(cur_30)), type='l',col = "blue",xlab= "index",ylab = "current data [Amps]")#
par(new = TRUE)#
plot(cur_30[1:(nstart+nstep)],type = 'l',col = "red",xlim = c(0,(nstart+nstep)), ylim=c(min(cur_30),max(cur_30)),xlab= "index",ylab = "current data [Amps]")#
legend('topright',legend = c('actual data','prediction'),lty = c(1,1),col=c("red","blue"))
plot((nstart+1):(nstart+nstep),Predict[1,], xlim = c(0,(nstart+nstep)),ylim = c(min(cur_30),max(cur_30)), main = "current prediction at 30Hz",type='l',col = "blue",xlab= "index",ylab = "current data [Amps]")
par(new = TRUE)
plot(cur_30[1:(nstart+nstep)],type = 'l',col = "red",xlim = c(0,(nstart+nstep)), ylim=c(min(cur_30),max(cur_30)),xlab= "index",ylab = "current data [Amps]")
legend('topright',legend = c('actual data','prediction'),lty = c(1,1),col=c("red","blue"))
diff = Predict[1,] - series[(nstart+1):(nstart+nstep)]
diff = Predict[1,] - series[(nstart+1):(nstart+nstep),1]
plot(diff)
Predict[1,]
data_30[(nstart+1):(nstart+nstep),1]
diff = Predict[1,] - data_30[(nstart+1):(nstart+nstep),1]
plot(diff)
sd(diff)
ulc[1:length(diff)] = mean(diff) + 3*sd(diff)#
llc[1:length(diff)] = mean(diff) - 3*sd(diff)#
plot(diff,type = 'l',col ="blue")#
par(new = TRUE)#
plot(ulc,type = 'l',col = "red")#
par(new = TRUE)#
plot(llc,type = 'l',col = "red")
ulc = NA#
llc = NA#
ulc[1:length(diff)] = mean(diff) + 3*sd(diff)#
llc[1:length(diff)] = mean(diff) - 3*sd(diff)#
plot(diff,type = 'l',col ="blue")#
par(new = TRUE)#
plot(ulc,type = 'l',col = "red")#
par(new = TRUE)#
plot(llc,type = 'l',col = "red")
ulc = NA#
llc = NA#
ulc[1:length(diff)] = mean(diff) + 3*sd(diff)#
llc[1:length(diff)] = mean(diff) - 3*sd(diff)#
plot(diff,type = 'l',col ="blue",ylim = c(mean(diff) - 3*sd(diff),mean(diff) + 3*sd(diff)))#
par(new = TRUE)#
plot(ulc,type = 'l',col = "red",ylim = c(mean(diff) - 3*sd(diff),mean(diff) + 3*sd(diff)))#
par(new = TRUE)#
plot(llc,type = 'l',col = "red",ylim = c(mean(diff) - 3*sd(diff),mean(diff) + 3*sd(diff)))
ulc[1:length(diff)] = mean(diff) + 3*sd(diff)#
llc[1:length(diff)] = mean(diff) - 3*sd(diff)#
plot(diff,type = 'l',col ="blue",ylim = c(min(diff) ,mean(diff) + 3*sd(diff)))#
par(new = TRUE)#
plot(ulc,type = 'l',col = "red",ylim = c(min(diff),mean(diff) + 3*sd(diff)))#
par(new = TRUE)#
plot(llc,type = 'l',col = "red",ylim = c(min(diff),mean(diff) + 3*sd(diff)))
plot(diff,type = 'l',col ="blue",ylim = c(min(diff) ,mean(diff) + 3*sd(diff)),ylab = "residual error [Amps]")#
par(new = TRUE)#
plot(ulc,type = 'l',col = "red",ylim = c(min(diff),mean(diff) + 3*sd(diff)),ylab = "residual error [Amps]")#
par(new = TRUE)#
plot(llc,type = 'l',col = "red",ylim = c(min(diff),mean(diff) + 3*sd(diff)),ylab = "residual error [Amps]")
plot(diff,type = 'l',col ="blue",ylim = c(min(diff) ,mean(diff) + 3*sd(diff)),ylab = "residual error [Amps]")#
par(new = TRUE)#
plot(ulc,type = 'l',col = "red",ylim = c(min(diff),mean(diff) + 3*sd(diff)),ylab = "residual error [Amps]")#
par(new = TRUE)#
plot(llc,type = 'l',col = "red",ylim = c(min(diff),mean(diff) + 3*sd(diff)),ylab = "residual error [Amps]")#
legend('topright',legend = c('bound limit','residual'),lty = c(1,1),col=c("red","blue"))
plot(diff,type = 'l',col ="blue",ylim = c(min(diff) ,mean(diff) + 4*sd(diff)),ylab = "residual error [Amps]")#
par(new = TRUE)#
plot(ulc,type = 'l',col = "red",ylim = c(min(diff),mean(diff) + 4*sd(diff)),ylab = "residual error [Amps]")#
par(new = TRUE)#
plot(llc,type = 'l',col = "red",ylim = c(min(diff),mean(diff) + 4*sd(diff)),ylab = "residual error [Amps]")#
legend('topright',legend = c('bound limit','residual'),lty = c(1,1),col=c("red","blue"))
ulc = NA#
llc = NA#
ulc[1:length(diff)] = mean(cur_30) + 3*sd(cur_30)#
llc[1:length(diff)] = mean(cur_30) - 3*sd(cur_30)#
plot(diff,type = 'l',col ="blue",ylim = c(min(diff) ,mean(diff) + 4*sd(diff)),ylab = "residual error [Amps]")#
par(new = TRUE)#
plot(ulc,type = 'l',col = "red",ylim = c(min(diff),mean(diff) + 4*sd(diff)),ylab = "residual error [Amps]")#
par(new = TRUE)#
plot(llc,type = 'l',col = "red",ylim = c(min(diff),mean(diff) + 4*sd(diff)),ylab = "residual error [Amps]")#
legend('topright',legend = c('bound limit','residual'),lty = c(1,1),col=c("red","blue"))
ulc
plot(ulc,type = 'l',col = "red",ylim = c(min(diff),mean(diff) + 4*sd(diff)),ylab = "residual error [Amps]")
plot(diff,type = 'l',col ="blue",ylim = c(llc[1],ulc[1]),ylab = "residual error [Amps]")
plot(diff,type = 'l',col ="blue",ylim = c(llc[1],ulc[1]),ylab = "residual error [Amps]")
plot(diff,type = 'l',col ="blue",ylim = c( -4*sd(diff), 4*sd(diff)),ylab = "residual error [Amps]")#
par(new = TRUE)#
plot(ulc,type = 'l',col = "red",ylim = c( -4*sd(diff), 4*sd(diff)),ylab = "residual error [Amps]")#
par(new = TRUE)#
plot(llc,type = 'l',col = "red",ylim = c( -4*sd(diff), 4*sd(diff)),ylab = "residual error [Amps]")#
legend('topright',legend = c('bound limit','residual'),lty = c(1,1),col=c("red","blue"))
3*sd(diff)
ulc[1:length(diff)] =  3*sd(diff)#
llc[1:length(diff)] =  - 3*sd(diff)#
plot(diff,type = 'l',col ="blue",ylim = c( -5*sd(diff), 5*sd(diff)),ylab = "residual error [Amps]")#
par(new = TRUE)#
plot(ulc,type = 'l',col = "red",ylim = c( -5*sd(diff), 5*sd(diff)),ylab = "residual error [Amps]")#
par(new = TRUE)#
plot(llc,type = 'l',col = "red",ylim = c( -5*sd(diff), 5*sd(diff)),ylab = "residual error [Amps]")#
legend('topright',legend = c('bound limit','residual'),lty = c(1,1),col=c("red","blue"))
